from flask import Flask, render_template, request, redirect, flash, send_from_directory
import pandas as pd
import requests
from werkzeug.utils import secure_filename
import os
from fake_useragent import UserAgent
from bs4 import BeautifulSoup
from tqdm import tqdm
import warnings
import uuid
from pathlib import Path

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = str(Path.home())  # Set upload folder to the user's home directory

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ['xlsx', 'xls']

@app.route('/', methods=['GET', 'POST'])
def myform():
    if request.method == 'POST':
        if 'x' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['x']
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            filename1 = process_excel_file(filename)
            if not filename1:
                flash('Error processing the file. Please try again.')
                return redirect(request.url)
            summary = generate_summary(filename1)
            return render_template('summary.html', summary=summary)
    return render_template('index.html')

def process_excel_file(filename):
    try:
        df = pd.read_excel(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        ua = UserAgent()
        mail_validation = {}
        responsess = []
        for i, row in tqdm(df.iterrows(), total=len(df)):
            email = str(row['DirectEmail'])
            link = row['Source']
            if pd.isna(email) or pd.isna(link):
                mail_validation[i] = 0
                responsess.append('')
                continue
            headers = {'User-Agent': ua.random}
            try:
                response = requests.get(link, headers=headers)
                with warnings.catch_warnings():
                    warnings.filterwarnings("ignore", category=Warning)
                    soup = BeautifulSoup(response.content, 'html5lib')
                text = soup.get_text()
                if '@' in text:
                    mail_validation[i] = 1
                else:
                    mail_validation[i] = 0
                responsess.append(response)
            except requests.exceptions.RequestException:
                mail_validation[i] = -1
                responsess.append("Request Error")
    except Exception as e:
        print("Error processing the Excel file:", e)
        return None
    else:
        df["valid_email"] = pd.Series(mail_validation)
        df["Response_Type"] = pd.Series(responsess)
        filename1 = str(uuid.uuid4()) + '.xlsx'
        output_path = os.path.join(app.config['UPLOAD_FOLDER'], filename1)
        df.to_excel(output_path)
        return filename1

def generate_summary(filename):
    df = pd.read_excel(os.path.join(app.config['UPLOAD_FOLDER'], filename))
    summary = {
        "filename": filename,
        "total": len(df),
        "valid_emails": len(df.loc[df['valid_email'] == 1]),
        "invalid_emails": len(df.loc[df['valid_email'] == 0]),
        "request_errors": len(df.loc[df['valid_email'] == -1]),
    }
    return summary

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename, as_attachment=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
